{"version":3,"sources":["jquery.barrating.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","BarRating","self","this","wrapElement","classes","options","wrapperClass","theme","push","$elem","wrap","class","join","unwrapElement","unwrap","findOption","value","isNumeric","Math","floor","findInitialOption","initialRating","getData","key","data","setData","saveDataOnElement","$opt","val","text","userOptions","ratingValue","ratingText","originalRatingValue","originalRatingText","readOnly","readonly","ratingMade","removeDataOnElement","removeData","buildWidget","$w","find","each","html","$a","href","data-rating-value","data-rating-text","append","showSelectedRating","reverse","addClass","nextAllorPreviousAll","setSelectFieldValue","prop","change","resetSelectField","defaultSelected","parent","applyStyle","$widget","removeClass","isDeselectable","$element","deselectable","hasClass","attachClickHandler","$elements","on","event","preventDefault","attr","onSelect","call","attachMouseEnterHandler","attachMouseLeaveHandler","fastClicks","stopPropagation","click","disableClicks","attachHandlers","hoverState","detachHandlers","off","setupHandlers","show","insertAfter","hide","state","toggleClass","set","silent","clear","onClear","destroy","remove","onDestroy","prototype","init","elem","extend","fn","barrating","defaults","method","plugin","is","error","hasOwnProperty","next","showValues"],"mappings":"CAUC,SAAUA,GACe,kBAAXC,SAAyBA,OAAOC,IAEvCD,QAAQ,UAAWD,GACM,gBAAXG,SAAuBA,OAAOC,QAE5CD,OAAOC,QAAUJ,EAAQK,QAAQ,WAGjCL,EAAQM,SAEd,SAAUC,GAER,GAAIC,GAAY,WAEZ,QAASA,KACL,GAAIC,GAAOC,KAGPC,EAAc,WACd,GAAIC,IAAWH,EAAKI,QAAQC,aAED,MAAvBL,EAAKI,QAAQE,OACbH,EAAQI,KAAK,YAAcP,EAAKI,QAAQE,OAG5CN,EAAKQ,MAAMC,KAAKX,EAAE,WACdY,QAASP,EAAQQ,KAAK,SAK1BC,EAAgB,WAChBZ,EAAKQ,MAAMK,UAIXC,EAAa,SAASC,GAKtB,MAJIjB,GAAEkB,UAAUD,KACZA,EAAQE,KAAKC,MAAMH,IAGhBjB,EAAE,iBAAmBiB,EAAS,KAAMf,EAAKQ,QAIhDW,EAAoB,WACpB,GAAIC,GAAgBpB,EAAKI,QAAQgB,aAEjC,OAAKA,GAIEN,EAAWM,GAHPtB,EAAE,kBAAmBE,EAAKQ,QAOrCa,EAAU,SAASC,GACnB,GAAIC,GAAOvB,EAAKQ,MAAMe,KAAK,YAE3B,OAAmB,mBAARD,GACAC,EAAKD,GAGTC,GAIPC,EAAU,SAASF,EAAKP,GACV,OAAVA,GAAmC,gBAAVA,GACzBf,EAAKQ,MAAMe,KAAK,YAAaR,GAE7Bf,EAAKQ,MAAMe,KAAK,aAAaD,GAAOP,GAKxCU,EAAoB,WACpB,GAAIC,GAAOP,IAEPJ,EAAQW,EAAKC,MACbC,EAAOF,EAAKH,KAAK,QAAUG,EAAKH,KAAK,QAAUG,EAAKE,MAExDJ,GAAQ,MACJK,YAAa7B,EAAKI,QAGlB0B,YAAaf,EACbgB,WAAYH,EAGZI,oBAAqBjB,EACrBkB,mBAAoBL,EAGpBM,SAAUlC,EAAKI,QAAQ+B,SAGvBC,YAAY,KAKhBC,EAAsB,WACtBrC,EAAKQ,MAAM8B,WAAW,cAItBP,EAAa,WACb,MAAOV,GAAQ,eAIfS,EAAc,WACd,MAAOT,GAAQ,gBAIfkB,EAAc,WACd,GAAIC,GAAK1C,EAAE,WAAaY,QAAS,aAwCjC,OArCAV,GAAKQ,MAAMiC,KAAK,UAAUC,KAAK,WAC3B,GAAIf,GAAKC,EAAMe,EAAMC,CAErBjB,GAAM7B,EAAEG,MAAM0B,MAGVA,IACAC,EAAO9B,EAAEG,MAAM2B,OACfe,EAAO7C,EAAEG,MAAMsB,KAAK,QAChBoB,IAAQf,EAAOe,GAEnBC,EAAK9C,EAAE,SACH+C,KAAQ,IACRC,oBAAqBnB,EACrBoB,mBAAoBnB,EACpBe,KAAS3C,EAAKI,QAAkB,WAAIwB,EAAO,KAG/CY,EAAGQ,OAAOJ,MAMd5C,EAAKI,QAAQ6C,oBACbT,EAAGQ,OAAOlD,EAAE,WAAa8B,KAAQ,GAAIlB,QAAS,uBAI9CV,EAAKI,QAAQ8C,SACbV,EAAGW,SAAS,cAGZnD,EAAKI,QAAQ+B,UACbK,EAAGW,SAAS,eAGTX,GAIPY,EAAuB,WACvB,MAAI/B,GAAQ,eAAe6B,QAChB,UAEA,WAKXG,EAAsB,SAAStC,GAE/BD,EAAWC,GAAOuC,KAAK,YAAY,GAEnCtD,EAAKQ,MAAM+C,UAIXC,EAAmB,WACnB1D,EAAE,SAAUE,EAAKQ,OAAO8C,KAAK,WAAY,WACrC,MAAOrD,MAAKwD,kBAGhBzD,EAAKQ,MAAM+C,UAIXN,EAAqB,SAASrB,GAE9BA,EAAOA,EAAOA,EAAOG,IAGjB/B,EAAKI,QAAQ6C,oBACbjD,EAAKQ,MAAMkD,SAASjB,KAAK,sBAAsBb,KAAKA,IAKxD+B,EAAa,WACb,GAAIf,GAAK5C,EAAK4D,QAAQnB,KAAK,wBAA0BX,IAAgB,MACjEV,EAAgBC,EAAQ,eAAeD,aAG3CpB,GAAK4D,QAAQnB,KAAK,KAAKoB,YAAY,kCAGnCjB,EAAGO,SAAS,0BAA0BC,OACjCD,SAAS,gBAET9B,EAAQ,eAAiBvB,EAAEkB,UAAUI,IAAkBtB,EAAEkB,UAAUc,MAChEV,EAAgBU,KAChBc,EAAIvB,EAAQ,eAAsB,QAAI,OAAS,UAAU8B,SAAS,YAM1EW,EAAiB,SAASC,GAC1B,MAAK/D,GAAKI,QAAQ4D,aAIdhE,EAAKQ,MAAMiC,KAAK,gBAAgBd,OAEzB,EAGJoC,EAASE,SAAS,eARd,GAYXC,EAAqB,SAASC,GAC9BA,EAAUC,GAAG,kBAAmB,SAASC,GACrC,GAEItD,GACAa,EAHAgB,EAAK9C,EAAEG,MACPG,EAAUiB,EAAQ,cAuCtB,OAnCAgD,GAAMC,iBAENH,EAAUN,YAAY,iCACtBjB,EAAGO,SAAS,eAAeC,OACtBD,SAAS,eAEdpC,EAAQ6B,EAAG2B,KAAK,qBAChB3C,EAAOgB,EAAG2B,KAAK,oBAGXT,EAAelB,IACfA,EAAGiB,YAAY,0BAA0BT,OACpCS,YAAY,0BACjB9C,EAAQ,GAAIa,EAAO,KAEnBuC,EAAUN,YAAY,cACtBjB,EAAGO,SAAS,eAIhB3B,EAAQ,cAAeT,GACvBS,EAAQ,aAAcI,GACtBJ,EAAQ,cAAc,GAEtB6B,EAAoBtC,GACpBkC,EAAmBrB,GAGnBxB,EAAQoE,SAASC,KACbzE,EACA8B,IACAC,IACAsC,IAGG,KAKXK,EAA0B,SAASP,GACnCA,EAAUC,GAAG,uBAAwB,WACjC,GAAIxB,GAAK9C,EAAEG,KAEXkE,GAAUN,YAAY,iCACtBjB,EAAGO,SAAS,aAAaC,OACpBD,SAAS,aAEdF,EAAmBL,EAAG2B,KAAK,wBAK/BI,EAA0B,SAASR,GACnCnE,EAAK4D,QAAQQ,GAAG,sCAAuC,WACnDD,EAAUN,YAAY,aACtBZ,IACAU,OAOJiB,EAAa,SAAST,GACtBA,EAAUC,GAAG,uBAAwB,SAASC,GAC1CA,EAAMC,iBACND,EAAMQ,kBAEN/E,EAAEG,MAAM6E,WAKZC,EAAgB,SAASZ,GACzBA,EAAUC,GAAG,kBAAmB,SAASC,GACrCA,EAAMC,oBAIVU,EAAiB,SAASb,GAE1BD,EAAmBC,GAEfnE,EAAKI,QAAQ6E,aAEbP,EAAwBP,GAGxBQ,EAAwBR,KAI5Be,EAAiB,SAASf,GAE1BA,EAAUgB,IAAI,eAGdC,EAAgB,SAASjD,GACzBgC,UAAYnE,EAAK4D,QAAQnB,KAAK,KAE1BmC,GACAA,EAAWT,WAGXhC,GACA+C,EAAef,WACfY,EAAcZ,YAEda,EAAeb,WAIvBlE,MAAKoF,KAAO,WAEJhE,MAGJnB,IAGAuB,IAGAzB,EAAK4D,QAAUrB,IACfvC,EAAK4D,QAAQ0B,YAAYtF,EAAKQ,OAE9BmD,IAEAV,IAEAmC,EAAcpF,EAAKI,QAAQ+B,UAG3BnC,EAAKQ,MAAM+E,SAGftF,KAAKkC,SAAW,SAASqD,GACA,iBAAVA,IAAuBnE,EAAQ,aAAemE,IAEzDJ,EAAcI,GACdhE,EAAQ,WAAYgE,GACpBxF,EAAK4D,QAAQ6B,YAAY,iBAG7BxF,KAAKyF,IAAM,SAAS3E,GAChB,GAAIX,GAAUiB,EAAQ,cAEjBrB,GAAKQ,MAAMiC,KAAK,iBAAmB1B,EAAQ,MAAMY,QAGtDH,EAAQ,cAAeT,GACvBS,EAAQ,aAAcxB,EAAKQ,MAAMiC,KAAK,iBAAmB1B,EAAQ,MAAMa,QACvEJ,EAAQ,cAAc,GAEtB6B,EAAoBvB,KACpBmB,EAAmBlB,KAEnB4B,IAGKvD,EAAQuF,QACTvF,EAAQoE,SAASC,KACbxE,KACA6B,IACAC,OAKZ9B,KAAK2F,MAAQ,WACT,GAAIxF,GAAUiB,EAAQ,cAGtBG,GAAQ,cAAeH,EAAQ,wBAC/BG,EAAQ,aAAcH,EAAQ,uBAC9BG,EAAQ,cAAc,GAEtBgC,IACAP,EAAmBlB,KAEnB4B,IAGAvD,EAAQyF,QAAQpB,KACZxE,KACA6B,IACAC,MAIR9B,KAAK6F,QAAU,WACX,GAAI/E,GAAQe,IACRF,EAAOG,IACP3B,EAAUiB,EAAQ,cAGtB6D,GAAelF,EAAK4D,QAAQnB,KAAK,MAGjCzC,EAAK4D,QAAQmC,SAGb1D,IAGAzB,IAGAZ,EAAKQ,MAAM6E,OAGXjF,EAAQ4F,UAAUvB,KACdxE,KACAc,EACAa,IAYZ,MAPA7B,GAAUkG,UAAUC,KAAO,SAAU9F,EAAS+F,GAI1C,MAHAlG,MAAKO,MAAQV,EAAEqG,GACflG,KAAKG,QAAUN,EAAEsG,UAAWtG,EAAEuG,GAAGC,UAAUC,SAAUnG,GAE9CH,KAAKG,SAGTL,IAGXD,GAAEuG,GAAGC,UAAY,SAAUE,EAAQpG,GAC/B,MAAOH,MAAKyC,KAAK,WACb,GAAI+D,GAAS,GAAI1G,EAQjB,IALKD,EAAEG,MAAMyG,GAAG,WACZ5G,EAAE6G,MAAM,qDAIRF,EAAOG,eAAeJ,GAAS,CAE/B,GADAC,EAAOP,KAAK9F,EAASH,MACN,SAAXuG,EACA,MAAOC,GAAOpB,KAAKjF,EAGnB,IAAIqG,EAAOjG,MAAMe,KAAK,aAElB,MADAkF,GAAO7C,QAAU9D,EAAEG,MAAM4G,KAAK,cACvBJ,EAAOD,GAAQpG,OAK3B,CAAA,GAAsB,gBAAXoG,KAAwBA,EAGtC,MAFApG,GAAUoG,EACVC,EAAOP,KAAK9F,EAASH,MACdwG,EAAOpB,MAGdvF,GAAE6G,MAAM,UAAYH,EAAS,2CAKzC1G,EAAEuG,GAAGC,UAAUC,UACXjG,MAAM,GACNc,cAAc,KACd0F,YAAW,EACX7D,oBAAmB,EACnBe,cAAa,EACbd,SAAQ,EACRf,UAAS,EACTyC,YAAW,EACXK,YAAW,EACXU,QAAO,EACPtF,aAAa,aACbmE,SAAS,SAAUzD,EAAOa,EAAMyC,KAEhCwB,QAAQ,SAAU9E,EAAOa,KAEzBoE,UAAU,SAAUjF,EAAOa,MAI/B9B,EAAEuG,GAAGC,UAAUvG,UAAYA","file":"jquery.barrating.min.js","sourcesContent":["/**\n * jQuery Bar Rating Plugin v1.1.4\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2016 Kazik Pietruszewski\n *\n * This plugin is available under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n\n    var BarRating = (function() {\n\n        function BarRating() {\n            var self = this;\n\n            // wrap element in a wrapper div\n            var wrapElement = function() {\n                var classes = [self.options.wrapperClass];\n\n                if (self.options.theme !== '') {\n                    classes.push('br-theme-' + self.options.theme);\n                }\n                \n                self.$elem.wrap($('<div />', {\n                    'class': classes.join(' ')\n                }));\n            };\n\n            // unwrap element\n            var unwrapElement = function() {\n                self.$elem.unwrap();\n            };\n\n            // find option by value\n            var findOption = function(value) {\n                if ($.isNumeric(value)) {\n                    value = Math.floor(value);\n                }\n\n                return $('option[value=\"' + value  + '\"]', self.$elem);\n            };\n\n            // find initial option\n            var findInitialOption = function() {\n                var initialRating = self.options.initialRating;\n\n                if (!initialRating) {\n                    return $('option:selected', self.$elem);\n                }\n\n                return findOption(initialRating);\n            };\n\n            // get data\n            var getData = function(key) {\n                var data = self.$elem.data('barrating');\n\n                if (typeof key !== 'undefined') {\n                    return data[key];\n                }\n\n                return data;\n            };\n\n            // set data\n            var setData = function(key, value) {\n                if (value !== null && typeof value === 'object') {\n                    self.$elem.data('barrating', value);\n                } else {\n                    self.$elem.data('barrating')[key] = value;\n                }\n            };\n\n            // save data on element\n            var saveDataOnElement = function() {\n                var $opt = findInitialOption();\n\n                var value = $opt.val();\n                var text = $opt.data('html') ? $opt.data('html') : $opt.text();\n\n                setData(null, {\n                    userOptions: self.options,\n\n                    // initial rating based on the OPTION value\n                    ratingValue: value,\n                    ratingText: text,\n\n                    // rating will be restored by calling clear method\n                    originalRatingValue: value,\n                    originalRatingText: text,\n\n                    // read-only state\n                    readOnly: self.options.readonly,\n\n                    // did the user already select a rating?\n                    ratingMade: false\n                });\n            };\n\n            // remove data on element\n            var removeDataOnElement = function() {\n                self.$elem.removeData('barrating');\n            };\n\n            // return current rating text\n            var ratingText = function() {\n                return getData('ratingText');\n            };\n\n            // return current rating value\n            var ratingValue = function() {\n                return getData('ratingValue');\n            };\n\n            // build widget and return jQuery element\n            var buildWidget = function() {\n                var $w = $('<div />', { 'class': 'br-widget' });\n\n                // create A elements that will replace OPTIONs\n                self.$elem.find('option').each(function() {\n                    var val, text, html, $a;\n\n                    val = $(this).val();\n\n                    // create ratings - but only if val is defined\n                    if (val) {\n                        text = $(this).text();\n                        html = $(this).data('html');\n                        if (html) { text = html; }\n\n                        $a = $('<a />', {\n                            'href': '#',\n                            'data-rating-value': val,\n                            'data-rating-text': text,\n                            'html': (self.options.showValues) ? text : ''\n                        });\n\n                        $w.append($a);\n                    }\n\n                });\n\n                // append .br-current-rating div to the widget\n                if (self.options.showSelectedRating) {\n                    $w.append($('<div />', { 'text': '', 'class': 'br-current-rating' }));\n                }\n\n                // additional classes for the widget\n                if (self.options.reverse) {\n                    $w.addClass('br-reverse');\n                }\n\n                if (self.options.readonly) {\n                    $w.addClass('br-readonly');\n                }\n\n                return $w;\n            };\n\n            // return a jQuery function name depending on the 'reverse' setting\n            var nextAllorPreviousAll = function() {\n                if (getData('userOptions').reverse) {\n                    return 'nextAll';\n                } else {\n                    return 'prevAll';\n                }\n            };\n\n            // set the value of the select field\n            var setSelectFieldValue = function(value) {\n                // change selected option\n                findOption(value).prop('selected', true);\n\n                self.$elem.change();\n            };\n\n            // reset select field\n            var resetSelectField = function() {\n                $('option', self.$elem).prop('selected', function() {\n                    return this.defaultSelected;\n                });\n\n                self.$elem.change();\n            };\n\n            // display the currently selected rating\n            var showSelectedRating = function(text) {\n                // text undefined?\n                text = text ? text : ratingText();\n\n                // update .br-current-rating div\n                if (self.options.showSelectedRating) {\n                    self.$elem.parent().find('.br-current-rating').text(text);\n                }\n            };\n\n            // apply style by setting classes on elements\n            var applyStyle = function() {\n                var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\n                var initialRating = getData('userOptions').initialRating;\n\n                // remove classes\n                self.$widget.find('a').removeClass('br-selected br-current br-half');\n\n                // add classes\n                $a.addClass('br-selected br-current')[nextAllorPreviousAll()]()\n                    .addClass('br-selected');\n\n                if (!getData('ratingMade') && $.isNumeric(initialRating) && $.isNumeric(ratingValue())) {\n                    if (initialRating > ratingValue()) {\n                        $a[(getData('userOptions').reverse) ? 'prev' : 'next']().addClass('br-half');\n                    }\n                }\n            };\n\n            // check if the element is deselectable?\n            var isDeselectable = function($element) {\n                if (!self.options.deselectable) {\n                    return false;\n                }\n\n                if (self.$elem.find('option:first').val()) {\n                    // empty option not found\n                    return false;\n                }\n\n                return $element.hasClass('br-current');\n            };\n\n            // handle click events\n            var attachClickHandler = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    var $a = $(this),\n                        options = getData('userOptions'),\n                        value,\n                        text;\n\n                    event.preventDefault();\n\n                    $elements.removeClass('br-active br-selected br-half');\n                    $a.addClass('br-selected')[nextAllorPreviousAll()]()\n                        .addClass('br-selected');\n\n                    value = $a.attr('data-rating-value');\n                    text = $a.attr('data-rating-text');\n\n                    // is current and deselectable?\n                    if (isDeselectable($a)) {\n                        $a.removeClass('br-selected br-current')[nextAllorPreviousAll()]()\n                            .removeClass('br-selected br-current');\n                        value = ''; text = '';\n                    } else {\n                        $elements.removeClass('br-current');\n                        $a.addClass('br-current');\n                    }\n\n                    // remember selected rating\n                    setData('ratingValue', value);\n                    setData('ratingText', text);\n                    setData('ratingMade', true);\n\n                    setSelectFieldValue(value);\n                    showSelectedRating(text);\n\n                    // onSelect callback\n                    options.onSelect.call(\n                        self,\n                        ratingValue(),\n                        ratingText(),\n                        event\n                    );\n\n                    return false;\n                });\n            };\n\n            // handle mouseenter events\n            var attachMouseEnterHandler = function($elements) {\n                $elements.on('mouseenter.barrating', function() {\n                    var $a = $(this);\n\n                    $elements.removeClass('br-active br-selected br-half');\n                    $a.addClass('br-active')[nextAllorPreviousAll()]()\n                        .addClass('br-active');\n\n                    showSelectedRating($a.attr('data-rating-text'));\n                });\n            };\n\n            // handle mouseleave events\n            var attachMouseLeaveHandler = function($elements) {\n                self.$widget.on('mouseleave.barrating blur.barrating', function() {\n                    $elements.removeClass('br-active');\n                    showSelectedRating();\n                    applyStyle();\n                });\n            };\n\n            // somewhat primitive way to remove 300ms click delay on touch devices\n            // for a more advanced solution consider setting `fastClicks` option to false\n            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n            var fastClicks = function($elements) {\n                $elements.on('touchstart.barrating', function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    $(this).click();\n                });\n            };\n\n            // disable clicks\n            var disableClicks = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    event.preventDefault();\n                });\n            };\n\n            var attachHandlers = function($elements) {\n                // attach click event handler\n                attachClickHandler($elements);\n\n                if (self.options.hoverState) {\n                    // attach mouseenter event handler\n                    attachMouseEnterHandler($elements);\n\n                    // attach mouseleave event handler\n                    attachMouseLeaveHandler($elements);\n                }\n            };\n\n            var detachHandlers = function($elements) {\n                // remove event handlers in the \".barrating\" namespace\n                $elements.off('.barrating');\n            };\n\n            var setupHandlers = function(readonly) {\n                $elements = self.$widget.find('a');\n\n                if (fastClicks) {\n                    fastClicks($elements);\n                }\n\n                if (readonly) {\n                    detachHandlers($elements);\n                    disableClicks($elements);\n                } else {\n                    attachHandlers($elements);\n                }\n            };\n\n            this.show = function() {\n                // run only once\n                if (getData()) return;\n\n                // wrap element\n                wrapElement();\n\n                // save data\n                saveDataOnElement();\n\n                // build & append widget to the DOM\n                self.$widget = buildWidget();\n                self.$widget.insertAfter(self.$elem);\n\n                applyStyle();\n\n                showSelectedRating();\n\n                setupHandlers(self.options.readonly);\n\n                // hide the select field\n                self.$elem.hide();\n            };\n\n            this.readonly = function(state) {\n                if (typeof state !== 'boolean' || getData('readOnly') == state) return;\n\n                setupHandlers(state);\n                setData('readOnly', state);\n                self.$widget.toggleClass('br-readonly');\n            };\n\n            this.set = function(value) {\n                var options = getData('userOptions');\n\n                if (!self.$elem.find('option[value=\"' + value + '\"]').val()) return;\n\n                // set data\n                setData('ratingValue', value);\n                setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\n                setData('ratingMade', true);\n\n                setSelectFieldValue(ratingValue());\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onSelect callback\n                if (!options.silent) {\n                    options.onSelect.call(\n                        this,\n                        ratingValue(),\n                        ratingText()\n                    );\n                }\n            };\n\n            this.clear = function() {\n                var options = getData('userOptions');\n\n                // restore original data\n                setData('ratingValue', getData('originalRatingValue'));\n                setData('ratingText', getData('originalRatingText'));\n                setData('ratingMade', false);\n\n                resetSelectField();\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onClear callback\n                options.onClear.call(\n                    this,\n                    ratingValue(),\n                    ratingText()\n                );\n            };\n\n            this.destroy = function() {\n                var value = ratingValue();\n                var text = ratingText();\n                var options = getData('userOptions');\n\n                // detach handlers\n                detachHandlers(self.$widget.find('a'));\n\n                // remove widget\n                self.$widget.remove();\n\n                // remove data\n                removeDataOnElement();\n\n                // unwrap the element\n                unwrapElement();\n\n                // show the element\n                self.$elem.show();\n\n                // onDestroy callback\n                options.onDestroy.call(\n                    this,\n                    value,\n                    text\n                );\n            };\n        }\n\n        BarRating.prototype.init = function (options, elem) {\n            this.$elem = $(elem);\n            this.options = $.extend({}, $.fn.barrating.defaults, options);\n\n            return this.options;\n        };\n\n        return BarRating;\n    })();\n\n    $.fn.barrating = function (method, options) {\n        return this.each(function () {\n            var plugin = new BarRating();\n\n            // plugin works with select fields\n            if (!$(this).is('select')) {\n                $.error('Sorry, this plugin only works with select fields.');\n            }\n\n            // method supplied\n            if (plugin.hasOwnProperty(method)) {\n                plugin.init(options, this);\n                if (method === 'show') {\n                    return plugin.show(options);\n                } else {\n                    // plugin exists?\n                    if (plugin.$elem.data('barrating')) {\n                        plugin.$widget = $(this).next('.br-widget');\n                        return plugin[method](options);\n                    }\n                }\n\n            // no method supplied or only options supplied\n            } else if (typeof method === 'object' || !method) {\n                options = method;\n                plugin.init(options, this);\n                return plugin.show();\n\n            } else {\n                $.error('Method ' + method + ' does not exist on jQuery.barrating');\n            }\n        });\n    };\n\n    $.fn.barrating.defaults = {\n        theme:'',\n        initialRating:null, // initial rating\n        showValues:false, // display rating values on the bars?\n        showSelectedRating:true, // append a div with a rating to the widget?\n        deselectable:true, // allow to deselect ratings\n        reverse:false, // reverse the rating?\n        readonly:false, // make the rating ready-only?\n        fastClicks:true, // remove 300ms click delay on touch devices?\n        hoverState:true, // change state on hover?\n        silent:false, // supress callbacks when controlling ratings programatically\n        wrapperClass:'br-wrapper', // class applied to wrapper div\n        onSelect:function (value, text, event) {\n        }, // callback fired when a rating is selected\n        onClear:function (value, text) {\n        }, // callback fired when a rating is cleared\n        onDestroy:function (value, text) {\n        } // callback fired when a widget is destroyed\n    };\n\n    $.fn.barrating.BarRating = BarRating;\n\n}));\n"],"sourceRoot":"/source/"}